services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks: 
      - kafka_network
    env_file: server.env

  broker:
    image: confluentinc/cp-kafka:7.3.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks: 
      - kafka_network
    env_file: server.env

  kafka-connect:
    image: stream-connector:${VERSION}
    build:
      context: src/stream-connector
    hostname: kafka-connect
    container_name: kafka-connect
    volumes:
      - ${PWD}/data/input:/data/input
      - ${PWD}/data/error:/data/error
      - ${PWD}/data/processed:/data/processed
    depends_on:
      - broker
    networks:
      - kafka_network
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    networks:
      - kafka_network
    env_file: server.env

  predictor:
    image: predictor:${VERSION}
    depends_on:
      - broker
    build:
      context: ./src
      dockerfile: ./predictor/Dockerfile
    deploy:
      mode: replicated
      replicas: 3
    networks: 
      - kafka_network

  twitter-api:
    image: twitter-api:${VERSION}
    build:
      context: ./src
      dockerfile: ./tw-api/Dockerfile
    hostname: twitter-api
    container_name: twitter-api
    networks: 
      - kafka_network
    volumes:
      - ${PWD}/data/api:/data
    ports:
      - "8099:8099"
    environment:
      TWEETS_FILE_PATH: /data/tweets_processed.csv

  twitter-api-processer:
    image: twitter-api-processer:${VERSION}
    build:
      context: ./src
      dockerfile: ./tw-api-processer/Dockerfile
    networks: 
      - kafka_network
    deploy:
      mode: replicated
      replicas: 3
    environment:
      INPUT_TOPIC: stream-tweets-processer
      OUTPUT_TOPIC: stream-tweets

  ksqldb-server:
    # *-----------------------------*
    # To connect to ksqlDB CLI
    #   docker exec --interactive --tty ksqldb ksql http://localhost:8088
    # *-----------------------------*
    image: confluentinc/ksqldb-server:0.28.2
    container_name: ksqldb
    depends_on:
      - broker
    ports:
      - "8088:8088"
    networks: 
      - kafka_network
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: http://broker:29092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     KSQL_STREAMS_PRODUCER_MAX_BLOCK_MS: 9223372036854775807
  #     KSQL_KSQL_CONNECT_URL: http://kafka-connect:8083
  #     KSQL_KSQL_SERVICE_ID: confluent_rmoff_01
  #     KSQL_KSQL_HIDDEN_TOPICS: '^_.*'

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.28.2
    container_name: ksqldb-cli
    depends_on:
      - broker
      - ksqldb-server
    networks: 
      - kafka_network
    entrypoint: /bin/sh
    tty: true

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.2.2
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - ksqldb-server
      - schema-registry
      - kafka-connect
    ports:
      - "9021:9021"
    networks: 
      - kafka_network
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_STREAMING_CLUSTER: 'kafka-connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    networks: 
      - kafka_network
    environment:
      DYNAMIC_CONFIG_ENABLED: true
    volumes:
      - ${PWD}/kafka-ui-config.yaml:/etc/kafkaui/dynamic_config.yaml

networks:
  kafka_network: